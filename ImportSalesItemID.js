// --------------------------------------------------------------------------
// Import the open sales order item key that was generated by the ERP system.
// --------------------------------------------------------------------------
function importOrderItemKey() {
  const subject = "Order Item Key"; // Subject to search for
  const targetSheetName = "Order Key"; // Sheet to update

  // Search for the latest email with the given subject
  const threads = GmailApp.search(`subject:${subject} has:attachment`, 0, 1);
  if (threads.length === 0) {
    Logger.log("No emails found with the subject: " + subject);
    return;
  }

  const messages = threads[0].getMessages();
  const latestMessage = messages[messages.length - 1]; // Get the latest message
  const attachments = latestMessage.getAttachments();

  // Find the correct CSV attachment by name
  const csvFile = attachments.find(att => att.getName() === "Order-Item-Key.csv");
  if (!csvFile) {
    Logger.log("No 'Order-Item-Key.csv' attachment found.");
    return;
  }

  // Parse the CSV content
  const csvContent = csvFile.getDataAsString();
  const data = Utilities.parseCsv(csvContent);

  // Write data into the target sheet
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(targetSheetName);
  if (!sheet) {
    Logger.log(`Sheet '${targetSheetName}' not found.`);
    return;
  }

  // Clear the sheet before inserting new data
  sheet.clearContents();
  sheet.getRange(1, 1, data.length, data[0].length).setValues(data);

  Logger.log("CSV data imported successfully.");
}


// -----------------------------------------------------------------
// Import the FNSKU Mapping Report which was imported in ERP System.
// -----------------------------------------------------------------
function importFNSKUMapping() {
  const subject = "FNSKU Mapping"; // Subject to search for
  const targetSheetName = "FNSKU Mapping"; // Sheet to update

  // Search for the latest email with the given subject
  const threads = GmailApp.search(`subject:${subject} has:attachment`, 0, 1);
  if (threads.length === 0) {
    Logger.log("No emails found with the subject: " + subject);
    return;
  }

  const messages = threads[0].getMessages();
  const latestMessage = messages[messages.length - 1]; // Get the latest message
  const attachments = latestMessage.getAttachments();

  // Find the correct CSV attachment by name
  const csvFile = attachments.find(att => att.getName() === "FNSKU-Mapping.csv");
  if (!csvFile) {
    Logger.log("No 'FNSKU-Mapping.csv' attachment found.");
    return;
  }

  // Parse the CSV content
  const csvContent = csvFile.getDataAsString();
  const data = Utilities.parseCsv(csvContent);

  // Write data into the target sheet
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(targetSheetName);
  if (!sheet) {
    Logger.log(`Sheet '${targetSheetName}' not found.`);
    return;
  }

  // Clear the sheet before inserting new data
  sheet.clearContents();
  sheet.getRange(1, 1, data.length, data[0].length).setValues(data);

  Logger.log("CSV data imported successfully.");
}